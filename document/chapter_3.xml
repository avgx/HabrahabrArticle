
<chapter>
	<title>Преобразование документа DocBook</title>
	<para>
		Для того, что бы привести наш документ DocBook в какой-нибудь пригодный для чтения или печати формат
		необходимо использовать трансформатор (или даже конвейер из нескольких трансформаторов друг за другом), 
		который на основе содержимого документа и, обычно, стилей оформления сформирует конечный документ.




	</para>
	<para>
		<inlinemediaobject>
			<imageobject>
				<imagedata fileref="../document/images/ls_docbook_single_source.png"/>
			</imageobject>
		</inlinemediaobject>
	</para>
	<para>
	 Как правило для трансформации используется DocBook XSL (хотя существуют и более экзотические способы).
	 Из коробки он уже поддерживает несколько форматов документов - html, xsl-fo, manpages и др. В случае, если требуется иной формат представления,
	 то можно продолжить цепочку преобразований. 
	 Так для получения документа в PDF обычно используют следующую схему:

	</para>
	<para>

		<figure id="doc_to_pdf">
			<title>Схема трансформации DocBook в pdf</title>
			<graphic scale="55" fileref="../document/images/docbook2pdf.png"/>
		</figure>
	</para>
	<para>
 И вот тут начинается самое интересное.
 Стили реализованные в DocBook-xsl по умолчанию позволяют получить нормальный по внешнему виду документ, 
 но обычно, все равно требуется их кастомизация.

	</para>
	<para>
		 Разработчики стилей docbook-xsl позаботились об этой возможности  и реализовали для этого специальные механизмы:
	</para>
	<orderedlist>
		<listitem>		
			 Самые общие параметры по формированию документа каждого из поддерживаемых форматов вынесены в отдельный файл param.xsl и для каждого из них есть более-менее подробное описание. 			
		</listitem>
		<listitem>
			 Существуют специальные шаблоны для формирования пользовательских шаблонов. 
		</listitem>
		<listitem>
			 Наличие специальных, пустых по умолчанию шаблонов для последующего их переопределения.
		</listitem>
	</orderedlist>		 


	<para>
	Чаще всего, для управления процессом формирования документа разрабатывается собственный корневой XSL стиль, так называемый "Драйвер" в котором уже осуществляется тонкая настройка всех остальных параметров трансформации.
 Так как, каждый конечный формат в DocBook-xsl представлен своим набором шаблонов, то и "драйвер" под каждый из них нужно писать отдельный.
 Например, мы используем два конечных формата представления документа (xsl-fo и htmlhelp) и соответственно имеем два "драйвера" и два набора переопределенных стилей.
	</para>
	<sect1>
		<title>Выбор xslt и fo процессора</title>
		<para>Для работы с DocBook-xsl необходим xslt процессор поддерживающий xslt версию 1.0. (Есть реализация docbook-xsl для версии 2.0, но не знаю на сколько она стабильная).
        На текущий момент существует множество рабочих решений под самые различные платформы - так что с этим проблем возникнуть не должно. 
		В наших проектах мы используем  saxon, правда старую версию - Saxon 9.1.0.8J, так как в последней бесплатной  полностью убрана поддержка расширений EXSLT (необходимо для профайлинга документа) и 
		не было уверенности, что расширение saxon для поддержки подсветки синтаксиса которое идет вместе со стилями будет работать в новой. </para>
		<para>Для формирования документов из xsl-fo понадобится fo-процессор. Тут дела обстоят немного хуже - 
	 из рабочих процессоров лично я пробовал два FOP (opensource) и XEP (RenderX XEP Engine - немного платный).
	 Существуют ещё несколько рабочих fo процессоров, но лично я с ними не пробовал работать и ничего сказать про них не могу.
		</para>
		<para>Главный плюс FOP в том, что он бесплатный, но есть и минус -  из "коробки" не поддерживает русский язык. При первом знакомстве с ним, нам так и не удалось заставить его работать с кириллицей. Как ни странно в интернете много статей про это, но все они были или очень старые (где предлагалось пересобрать FOP с нужными шрифтами) или содержали ошибки, которые не позволяли добиться нужного результата. В итоге все оказалось очень просто, но выбор наш уже пал на XEP.
	     XEP прекрасно работает с кириллицей сразу же после установки и в принципе не требует какой-либо дополнительной настройки, но стоит 400$ - причем desktop версия. Различие в качестве рендера судить не берусь, но для интереса можете сравнить сами (в примере имеются файлы собранные обоими fo-процессорами).</para> 
	</sect1>
	<sect1>
		<title>Настройка стиля оформления</title>

		<para>
		  Для качественной настройки стилей необходимо немного знать  язык xsl преобразования, а также язык разметки конечного документа. К сожалению, у нас в команде на момент перехода к DocBook  такой компетенции не было и поэтому  настройка заняла у нас достаточное количество времени - особенно для FO формата.
          Хотя в сети и существует большое количество сайтов с информацией по этому поводу (особенно ценный на мой взгляд  "<link linkend='stylemanurl' endterm="stylemanurl.title"/>") получить сразу полную картину очень сложно.
		  Поэтому я решил поступить по принципу - "лучше один раз увидеть, чем сто раз услышать" и подготовил пример стиля для xsl-fo (примерно такого же, какой мы используем у себя в проектах)  вместе с исходным текстом данной статьи и настроенным FOP.
		</para>	
		<para>
		Единственный момент, на котором хочу остановится и  который по началу может сбить с толку - настройка шрифтов и языка документа. По умолчанию в xsl-fo включаются шрифты которые не поддерживают кириллицу, и если не переопределить эти параметры или допустить в них ошибку (необходимо убедится что fo процессор настроен на работу с указанным шрифтами), то на выходе из fo процессора скорее всего получим не читаемый документ.	
		 Язык документа влияет  на создание автотекста  для названий элементов книги (Глава, Книга и т.п). В принципе настройка только этих параметров уже позволит получить "корректный" документ.
		Также скорее всего возникнет желание поменять внешний вид титульной страницы документа. Сделать это можно при помощи специально подготовленного в docbook-xsl шаблона. Для этого необходимо определить свой вариант файла "/fo/titlepage.templates.xml" и при помощи xslt процессора и шаблона "/fo/titlepage.templates.xsl" получить настроенный стиль оформления для подключения в "драйвер". 
		В некоторых случаях встроенных механизмов конфигурации не хватает, и тогда приходится уже явно переопределять в драйвере оригинальные стили docbook-xsl.	
		</para>

	</sect1>
</chapter>

